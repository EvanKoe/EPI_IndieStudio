!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ekoehler/Documents/Cpp/Indie/src/graphics/Objects/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
Button	Button.cpp	/^    Button::Button($/;"	f	class:Indie::Button
Button	Button.hpp	/^    class Button : public IGraphic {$/;"	c	namespace:Indie
Indie	Button.cpp	/^namespace Indie {$/;"	n	file:
Indie	Button.hpp	/^namespace Indie {$/;"	n
Indie	Mouse.cpp	/^namespace Indie {$/;"	n	file:
Indie	Mouse.hpp	/^namespace Indie {$/;"	n
Indie	Music.cpp	/^namespace Indie {$/;"	n	file:
Indie	Music.hpp	/^namespace Indie {$/;"	n
Indie	Noise.cpp	/^namespace Indie {$/;"	n	file:
Indie	Noise.hpp	/^namespace Indie {$/;"	n
Indie	Sprite.cpp	/^namespace Indie {$/;"	n	file:
Indie	Sprite.hpp	/^namespace Indie {$/;"	n
Indie	Text.cpp	/^namespace Indie {$/;"	n	file:
Indie	Text.hpp	/^namespace Indie {$/;"	n
Mouse	Mouse.cpp	/^    Mouse::Mouse(std::vector<int> x, std::vector<int> y)$/;"	f	class:Indie::Mouse
Mouse	Mouse.hpp	/^    class Mouse : public IGraphic {$/;"	c	namespace:Indie
Music	Music.cpp	/^    Music::Music(std::string)$/;"	f	class:Indie::Music
Music	Music.hpp	/^    class Music : public IGraphic {$/;"	c	namespace:Indie
Noise	Noise.cpp	/^    Noise::Noise(std::string path)$/;"	f	class:Indie::Noise
Noise	Noise.hpp	/^    class Noise : public IGraphic {$/;"	c	namespace:Indie
Sprite	Sprite.cpp	/^    Sprite::Sprite(std::string)$/;"	f	class:Indie::Sprite
Sprite	Sprite.hpp	/^    class Sprite : public IGraphic {$/;"	c	namespace:Indie
Text	Text.cpp	/^    Text::Text(std::string str, float x, float y, float size, Color col)$/;"	f	class:Indie::Text
Text	Text.hpp	/^    class Text : public IGraphic {$/;"	c	namespace:Indie
__anon774d14970102	Button.hpp	/^                std::function<void (void)> fun = [](){},$/;"	f	class:Indie::Button	file:
__anon774d14970202	Button.hpp	/^                Vector2 pos = { 0, 0 },$/;"	f	class:Indie::Button	file:
_col	Text.hpp	/^            Color _col;$/;"	m	class:Indie::Text	typeref:typename:Color
_font	Text.hpp	/^            Font _font;$/;"	m	class:Indie::Text	typeref:typename:Font
_is_enabled	Button.hpp	/^            bool _is_enabled;$/;"	m	class:Indie::Button	typeref:typename:bool
_name	Button.hpp	/^            std::string _name;$/;"	m	class:Indie::Button	typeref:typename:std::string
_noise	Noise.hpp	/^            Sound _noise;$/;"	m	class:Indie::Noise	typeref:typename:Sound
_onClick	Button.hpp	/^            std::function<void (void)> _onClick;$/;"	m	class:Indie::Button	typeref:typename:std::function<void (void)>
_path	Noise.hpp	/^            std::string _path;$/;"	m	class:Indie::Noise	typeref:typename:std::string
_pos	Text.hpp	/^            Vector2 _pos;$/;"	m	class:Indie::Text	typeref:typename:Vector2
_rec	Button.hpp	/^            Rectangle _rec;$/;"	m	class:Indie::Button	typeref:typename:Rectangle
_size	Text.hpp	/^            size_t _size;$/;"	m	class:Indie::Text	typeref:typename:size_t
_text	Button.hpp	/^            std::string _text;$/;"	m	class:Indie::Button	typeref:typename:std::string
_value	Text.hpp	/^            std::string _value;$/;"	m	class:Indie::Text	typeref:typename:std::string
_x	Mouse.hpp	/^            std::vector<int> _x;$/;"	m	class:Indie::Mouse	typeref:typename:std::vector<int>
_y	Mouse.hpp	/^            std::vector<int> _y;$/;"	m	class:Indie::Mouse	typeref:typename:std::vector<int>
draw	Text.cpp	/^    void Text::draw(void) {$/;"	f	class:Indie::Text	typeref:typename:void
getPos	Mouse.cpp	/^    std::list<std::vector<int>> Mouse::getPos(void)$/;"	f	class:Indie::Mouse	typeref:typename:std::list<std::vector<int>>
getSprite	Sprite.cpp	/^    void Sprite::getSprite(std::string)$/;"	f	class:Indie::Sprite	typeref:typename:void
getText	Button.cpp	/^    std::string Button::getText(void)$/;"	f	class:Indie::Button	typeref:typename:std::string
getText	Text.cpp	/^    std::string Text::getText(void)$/;"	f	class:Indie::Text	typeref:typename:std::string
isDisabled	Button.cpp	/^    bool Button::isDisabled(void)$/;"	f	class:Indie::Button	typeref:typename:bool
isPlaying	Music.cpp	/^    bool Music::isPlaying(void)$/;"	f	class:Indie::Music	typeref:typename:bool
pause	Music.cpp	/^    void Music::pause(void)$/;"	f	class:Indie::Music	typeref:typename:void
play	Music.cpp	/^    void Music::play(void)$/;"	f	class:Indie::Music	typeref:typename:void
play	Noise.cpp	/^    void Noise::play(void)$/;"	f	class:Indie::Noise	typeref:typename:void
setDisabled	Button.cpp	/^    void Button::setDisabled(bool b)$/;"	f	class:Indie::Button	typeref:typename:void
setLoop	Music.cpp	/^    void Music::setLoop(void)$/;"	f	class:Indie::Music	typeref:typename:void
setSound	Music.cpp	/^    void Music::setSound(void)$/;"	f	class:Indie::Music	typeref:typename:void
setSprite	Sprite.cpp	/^    void Sprite::setSprite(std::string)$/;"	f	class:Indie::Sprite	typeref:typename:void
setText	Button.cpp	/^    void Button::setText(std::string str)$/;"	f	class:Indie::Button	typeref:typename:void
setText	Text.cpp	/^    void Text::setText(std::string str)$/;"	f	class:Indie::Text	typeref:typename:void
stop	Music.cpp	/^    void Music::stop(void)$/;"	f	class:Indie::Music	typeref:typename:void
~Button	Button.cpp	/^    Button::~Button() {}$/;"	f	class:Indie::Button
~Mouse	Mouse.cpp	/^    Mouse::~Mouse()$/;"	f	class:Indie::Mouse
~Music	Music.cpp	/^    Music::~Music()$/;"	f	class:Indie::Music
~Noise	Noise.cpp	/^    Noise::~Noise()$/;"	f	class:Indie::Noise
~Sprite	Sprite.cpp	/^    Sprite::~Sprite()$/;"	f	class:Indie::Sprite
~Text	Text.cpp	/^    Text::~Text()$/;"	f	class:Indie::Text
